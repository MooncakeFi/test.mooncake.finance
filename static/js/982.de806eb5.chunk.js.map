{"version":3,"file":"static/js/982.de806eb5.chunk.js","mappings":"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","sources":["../node_modules/@particle-network/provider/src/types.ts","../node_modules/@particle-network/provider/src/auth-adapter.ts","../node_modules/@particle-network/provider/src/connection.ts","../node_modules/@particle-network/provider/src/provider.ts","../node_modules/@particle-network/provider/src/utils.ts","../node_modules/@particle-network/provider/src/delegate-provider.ts"],"sourcesContent":["import { JsonRpcRequest, JsonRpcResponse, ParticleRpcRequest, RequestArguments } from '@particle-network/auth';\nimport { EventEmitter } from 'events';\n\nexport class ProviderError extends Error {\n    constructor(public code: number, public message: string, public data?: unknown) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.data = data;\n    }\n\n    public static userRejectedRequest() {\n        return new ProviderError(4001, 'The user rejected the request');\n    }\n\n    public static userCancelOperation() {\n        return new ProviderError(4011, 'The user cancel the operation');\n    }\n\n    public static unauthorized() {\n        return new ProviderError(4100, 'The requested method and/or account has not been authorized by the user');\n    }\n\n    public static unsupportedMethod() {\n        return new ProviderError(4200, 'The Provider does not support the requested method');\n    }\n\n    public static unsupportedChain() {\n        return new ProviderError(4201, 'The Provider does not support the chain');\n    }\n\n    public static disconnected() {\n        return new ProviderError(4900, 'The Provider is disconnected from all chains');\n    }\n\n    public static chainDisconnected() {\n        return new ProviderError(4901, 'The Provider is not connected to the requested chain');\n    }\n\n    public static paramsError() {\n        return new ProviderError(8002, 'Param error, see doc for more info');\n    }\n}\n\nexport interface ProviderMessage {\n    type: string;\n    data: unknown;\n}\n\nexport interface ProviderConnectInfo {\n    chainId: string;\n}\n\nexport type ProviderChainId = string;\n\nexport type ProviderAccounts = string[];\n\nexport interface EIP1102Request extends RequestArguments {\n    method: 'eth_requestAccounts';\n}\n\nexport interface ConnectionConfig {\n    url: string;\n    basicCredentials: string;\n    chainId: () => number;\n    authentication: ParticleAuthentication;\n}\n\nexport interface ParticleAuthentication {\n    projectId: string;\n    clientKey: string;\n}\n\nexport abstract class IEvents {\n    public abstract events: EventEmitter;\n\n    // events\n    public abstract on(event: string, listener: any): this;\n    public abstract once(event: string, listener: any): this;\n    public abstract off(event: string, listener: any): this;\n    public abstract removeListener(event: string, listener: any): this;\n}\n\nexport abstract class IJsonRpcConnection extends IEvents {\n    public events = new EventEmitter();\n\n    public abstract connected: boolean;\n    public abstract connecting: boolean;\n\n    public on(event: string, listener: any) {\n        this.events.on(event, listener);\n        return this;\n    }\n\n    public once(event: string, listener: any) {\n        this.events.once(event, listener);\n        return this;\n    }\n\n    public off(event: string, listener: any) {\n        this.events.off(event, listener);\n        return this;\n    }\n\n    public removeListener(event: string, listener: any) {\n        this.events.removeListener(event, listener);\n        return this;\n    }\n\n    public abstract open(): Promise<void>;\n    public abstract close(): Promise<void>;\n    public abstract send(request: ParticleRpcRequest): Promise<JsonRpcResponse>;\n}\n\nexport abstract class IJsonRpcProvider extends IEvents implements IEthereumProvider {\n    public events = new EventEmitter();\n    public on(event: string, listener: any) {\n        this.events.on(event, listener);\n        return this;\n    }\n\n    public once(event: string, listener: any) {\n        this.events.once(event, listener);\n        return this;\n    }\n\n    public off(event: string, listener: any) {\n        this.events.off(event, listener);\n        return this;\n    }\n\n    public removeListener(event: string, listener: any) {\n        this.events.removeListener(event, listener);\n        return this;\n    }\n\n    abstract request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport interface IEthereumProvider {\n    // connection event\n    on(event: 'connect', listener: (info: ProviderConnectInfo) => void): this;\n    // disconnection event\n    on(event: 'disconnect', listener: (error?: ProviderError) => void): this;\n    // arbitrary messages\n    on(event: 'message', listener: (message: ProviderMessage) => void): this;\n    // chain changed event\n    on(event: 'chainChanged', listener: (chainId: ProviderChainId) => void): this;\n    // accounts changed event\n    on(event: 'accountsChanged', listener: (accounts: ProviderAccounts) => void): this;\n\n    on(event: string, listener: any): this;\n\n    once(event: string, listener: any): this;\n\n    off(event: string, listener: any): this;\n\n    removeListener(event: string, listener: any): this;\n\n    request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport interface IAuthAdapter {\n    request(request: Partial<JsonRpcRequest>): Promise<any>;\n}\n\nexport const notSupportMethods = ['eth_signTransaction', 'eth_sign', 'eth_sendRawTransaction'];\n\nexport const signerMethods = [\n    'eth_requestAccounts', //EIP-1102\n    'eth_accounts',\n    'eth_chainId',\n    'eth_sendTransaction',\n    'eth_signTypedData',\n    'eth_signTypedData_v1',\n    'eth_signTypedData_v3',\n    'eth_signTypedData_v4',\n    'personal_sign',\n    'wallet_switchEthereumChain', //EIP-3326\n    'wallet_addEthereumChain', //EIP-3085\n    'wallet_watchAsset', //EIP-747\n];\n\nexport const particleSignerMethods = [\n    'personal_sign_uniq', //particle mpc signature uniq\n    'eth_signTypedData_v4_uniq', //particle mpc signature uniq\n];\n","import type { Auth, JsonRpcRequest } from '@particle-network/auth';\nimport { addHexPrefix, intToHex, isNullish } from '@particle-network/auth';\nimport { ChainId, chains } from '@particle-network/chains';\nimport { Buffer } from 'buffer';\nimport type { IAuthAdapter } from './types';\nimport { ProviderError } from './types';\n\nexport class AuthEVMAdapter implements IAuthAdapter {\n    constructor(private auth: Auth) {\n        this.auth = auth;\n    }\n\n    public async request(request: Partial<JsonRpcRequest>): Promise<any> {\n        if (request.method === 'eth_requestAccounts' || request.method === 'eth_accounts') {\n            let wallet = this.auth.getWallet();\n            if (wallet) {\n                return [wallet.public_address];\n            }\n            await this.auth.login();\n            wallet = this.auth.getWallet();\n            if (wallet) {\n                return [wallet.public_address];\n            } else {\n                throw new Error('Create wallet failed');\n            }\n        } else if (request.method === 'eth_chainId') {\n            return intToHex(this.auth.getChainId());\n        } else if (request.method === 'eth_sendTransaction') {\n            if (request.params && request.params instanceof Array && request.params[0]) {\n                const txData = request.params[0];\n                if (isNullish(txData.type)) {\n                    if (chains.isChainSupportEIP1559(this.auth.getChain())) {\n                        // set transaction default type \"0x2\", EIP1559.\n                        txData.type = '0x2';\n                    } else {\n                        txData.type = '0x0';\n                    }\n                }\n                if (isNullish(txData.chainId)) {\n                    txData.chainId = intToHex(this.auth.getChainId());\n                }\n                if (isNullish(txData.nonce)) {\n                    txData.nonce = '0x0';\n                }\n                if (isNullish(txData.data)) {\n                    txData.data = '0x';\n                }\n\n                return this.auth.sendTransaction(this.legacyToString(request.params[0]));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (\n            request.method === 'eth_signTypedData_v3' ||\n            request.method === 'eth_signTypedData_v4' ||\n            request.method === 'eth_signTypedData_v4_uniq'\n        ) {\n            if (request.params && request.params instanceof Array && request.params.length >= 2) {\n                let typedData = request.params[1];\n                if (typeof typedData === 'string' && !typedData.startsWith('0x')) {\n                    typedData = addHexPrefix(Buffer.from(typedData).toString('hex'));\n                }\n                return this.auth.sign(request.method, this.legacyToString(typedData));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (request.method === 'eth_signTypedData' || request.method === 'eth_signTypedData_v1') {\n            if (request.params && request.params instanceof Array && request.params[0]) {\n                let typedData = request.params[0];\n                if (typeof typedData === 'string' && !typedData.startsWith('0x')) {\n                    typedData = addHexPrefix(Buffer.from(typedData).toString('hex'));\n                }\n                return this.auth.sign(request.method, this.legacyToString(typedData));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (request.method === 'personal_sign' || request.method === 'personal_sign_uniq') {\n            if (request.params && request.params instanceof Array && request.params[0]) {\n                return this.auth.sign(request.method, this.legacyToString(request.params[0]));\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else if (request.method === 'wallet_switchEthereumChain') {\n            if (request.params && request.params instanceof Array && request.params[0] && request.params[0].chainId) {\n                const chainId = Number(request.params[0].chainId) as ChainId;\n                const chain = chains.getEVMChainInfoById(chainId);\n                // for each key\n                if (chain) {\n                    await this.auth.switchChain(chain);\n                    return Promise.resolve(null);\n                }\n                return Promise.reject(ProviderError.unsupportedChain());\n            } else {\n                return Promise.reject(ProviderError.paramsError());\n            }\n        } else {\n            return Promise.reject(ProviderError.unsupportedMethod());\n        }\n    }\n\n    private legacyToString(params: unknown): string {\n        let message;\n        if (typeof params === 'number') {\n            message = addHexPrefix(params.toString(16));\n        } else if (typeof params === 'string') {\n            if (params.toString().startsWith('0x')) {\n                message = params;\n            } else {\n                message = addHexPrefix(Buffer.from(params).toString('hex'));\n            }\n        } else {\n            message = addHexPrefix(Buffer.from(JSON.stringify(params)).toString('hex'));\n        }\n        return message;\n    }\n}\n","import type { JsonRpcResponse, ParticleRpcRequest } from '@particle-network/auth';\nimport { isHttpUrl } from '@particle-network/auth';\nimport type { AxiosInstance } from 'axios';\nimport axios from 'axios';\nimport { IJsonRpcConnection } from './types';\nimport type { ConnectionConfig } from './types';\n\nexport class HttpConnection extends IJsonRpcConnection {\n    private api: AxiosInstance | undefined;\n\n    private registering = false;\n\n    constructor(private config: ConnectionConfig) {\n        super();\n        if (!isHttpUrl(config.url)) {\n            throw new Error(`Provided URL is not compatible with HTTP connection: ${config.url}`);\n        }\n        this.config = config;\n    }\n\n    get connected(): boolean {\n        return typeof this.api !== 'undefined';\n    }\n\n    get connecting(): boolean {\n        return this.registering;\n    }\n\n    public async open(): Promise<void> {\n        this.api = await this.register();\n    }\n\n    public async close(): Promise<void> {\n        this.onClose();\n    }\n\n    public async send(request: ParticleRpcRequest): Promise<JsonRpcResponse> {\n        if (typeof this.api === 'undefined') {\n            this.api = await this.register();\n        }\n        return this.api.post('/', request).then((res) => res.data);\n    }\n\n    // ---------- Private ----------------------------------------------- //\n\n    private async register(): Promise<AxiosInstance> {\n        const connectConfig = this.config;\n        if (!isHttpUrl(connectConfig.url)) {\n            throw new Error(`Provided URL is not compatible with HTTP connection: ${connectConfig.url}`);\n        }\n        if (this.registering) {\n            return new Promise((resolve, reject) => {\n                this.events.once('open', () => {\n                    if (typeof this.api === 'undefined') {\n                        return reject(new Error('HTTP connection is missing or invalid'));\n                    }\n                    resolve(this.api);\n                });\n            });\n        }\n        this.registering = true;\n        const api = axios.create({\n            baseURL: connectConfig.url,\n            timeout: 30_000, // 30 secs\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            },\n        });\n        api.interceptors.request.use(\n            function (config) {\n                if (!config.params) {\n                    config.params = {};\n                }\n                config.params.chainId = config.data?.chainId ?? connectConfig.chainId();\n                config.params.projectUuid = connectConfig.authentication.projectId;\n                config.params.projectKey = connectConfig.authentication.clientKey;\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n        this.onOpen(api);\n        return api;\n    }\n\n    private onOpen(api: AxiosInstance) {\n        this.api = api;\n        this.registering = false;\n        this.events.emit('open');\n    }\n\n    private onClose() {\n        this.api = undefined;\n        this.events.emit('close');\n    }\n}\n","import { Auth, intToHex, JsonRpcRequest, ParticleRpcRequest, rpcUrl } from '@particle-network/auth';\nimport { Chain } from '@particle-network/chains';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AuthEVMAdapter } from './auth-adapter';\nimport { HttpConnection } from './connection';\nimport {\n    IEthereumProvider,\n    IJsonRpcConnection,\n    IJsonRpcProvider,\n    notSupportMethods,\n    particleSignerMethods,\n    ProviderAccounts,\n    ProviderError,\n    signerMethods,\n} from './types';\nimport { getVersion } from './utils';\n\nexport class ParticleProvider extends IJsonRpcProvider implements IEthereumProvider {\n    public readonly isParticleNetwork = true;\n\n    private connection: IJsonRpcConnection;\n\n    private authAdapter: AuthEVMAdapter;\n\n    constructor(private auth: Auth) {\n        super();\n        this.auth = auth;\n        this.connection = this.setConnection();\n        this.authAdapter = new AuthEVMAdapter(this.auth);\n        this.auth.on('chainChanged', (chain: Chain) => {\n            if (chain.name !== 'Solana') {\n                this.emit('chainChanged', intToHex(chain.id));\n            }\n        });\n        if (typeof window !== 'undefined' && window.particle) {\n            window.particle.particleProvider = this;\n        }\n    }\n\n    get version() {\n        console.log('get version');\n        return getVersion();\n    }\n\n    private setConnection(): IJsonRpcConnection {\n        return new HttpConnection({\n            url: `${rpcUrl()}/evm-chain`,\n            basicCredentials: this.auth.basicCredentials(),\n            chainId: () => this.auth.getChainId(),\n            authentication: this.auth.config,\n        });\n    }\n\n    private emit(eventName: string | symbol, ...args: any[]): boolean {\n        return this.events.emit(eventName, ...args);\n    }\n\n    public async disconnect(): Promise<void> {\n        return this.auth.logout();\n    }\n\n    /**\n     * Enable the provider by invoking the `eth_requestAccounts` RPC method.\n     */\n    public async enable(): Promise<ProviderAccounts> {\n        return this.request({\n            method: 'eth_requestAccounts',\n        });\n    }\n\n    public async request(request: Partial<JsonRpcRequest>): Promise<any> {\n        if (!request.method || notSupportMethods.includes(request.method)) {\n            return Promise.reject(ProviderError.unsupportedMethod());\n        }\n        if (!this.connection.connected) {\n            await this.open();\n        }\n\n        console.log('Particle Provider Request', request);\n\n        const rpcRequest = {\n            chainId: Number(this.auth.getChainId()),\n            id: request.id ?? uuidv4(),\n            jsonrpc: request.jsonrpc ?? '2.0',\n            method: request.method,\n            params: request.params,\n        };\n\n        if (signerMethods.includes(request.method) || particleSignerMethods.includes(request.method)) {\n            return this.authAdapter.request(request);\n        } else {\n            return this.requestStrict(rpcRequest);\n        }\n    }\n\n    private async requestStrict(request: ParticleRpcRequest): Promise<any> {\n        return this.connection.send(request).then((output) => {\n            if (output.error) {\n                return Promise.reject(output.error);\n            } else {\n                return Promise.resolve(output.result);\n            }\n        });\n    }\n\n    protected async open() {\n        await this.connection.open();\n        this.connection.on('close', () => this.emit('disconnect'));\n        this.emit('connect', {\n            chainId: intToHex(this.auth.getChainId()),\n        });\n    }\n\n    protected async close() {\n        await this.connection.close();\n    }\n}\n","export function getVersion(): string {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const packages = require('../package.json');\n    return `web_${packages.version}`;\n}\n","import { Auth, JsonRpcRequest, ParticleRpcRequest, rpcUrl } from '@particle-network/auth';\nimport { v4 as uuidv4 } from 'uuid';\nimport { HttpConnection } from './connection';\nimport {\n    IEthereumProvider,\n    IJsonRpcConnection,\n    IJsonRpcProvider,\n    ProviderAccounts,\n    ProviderError,\n    notSupportMethods,\n    particleSignerMethods,\n    signerMethods,\n} from './types';\n\nexport class ParticleDelegateProvider extends IJsonRpcProvider implements IEthereumProvider {\n    public readonly isParticleDelegateProvider = true;\n\n    private connection: IJsonRpcConnection;\n\n    private chainId: number | undefined;\n\n    constructor(private auth: Auth, readonly signerProvider: IEthereumProvider) {\n        super();\n        this.connection = this.setConnection();\n        this.listenEvent();\n    }\n\n    private listenEvent() {\n        const event = this.events;\n        this.signerProvider.on('connect', (result) => event.emit('connect', result));\n        this.signerProvider.on('disconnect', (result) => event.emit('disconnect', result));\n        this.signerProvider.on('message', (result) => event.emit('message', result));\n        this.signerProvider.on('chainChanged', (result) => event.emit('chainChanged', result));\n        this.signerProvider.on('accountsChanged', (result) => event.emit('accountsChanged', result));\n    }\n\n    private setConnection(): IJsonRpcConnection {\n        return new HttpConnection({\n            url: `${rpcUrl()}/evm-chain`,\n            basicCredentials: this.auth.basicCredentials(),\n            chainId: () => this.chainId ?? this.auth.getChainId(),\n            authentication: this.auth.config,\n        });\n    }\n\n    async disconnect(): Promise<void> {\n        const provider = this.signerProvider as any;\n        if (provider.disconnect && typeof provider.disconnect === 'function') {\n            try {\n                await provider.disconnect();\n            } catch (e) {\n                // ignore\n            }\n        }\n    }\n\n    /**\n     * Enable the provider by invoking the `eth_requestAccounts` RPC method.\n     */\n    public async enable(): Promise<ProviderAccounts> {\n        const provider = this.signerProvider as any;\n        let result;\n        if (provider.enable && typeof provider.enable === 'function') {\n            try {\n                result = await provider.enable();\n            } catch (e) {\n                // ignore\n                result = await this.request({\n                    method: 'eth_requestAccounts',\n                });\n            }\n        }\n        return result;\n    }\n\n    public async request(request: Partial<JsonRpcRequest>): Promise<any> {\n        if (!request.method || notSupportMethods.includes(request.method)) {\n            return Promise.reject(ProviderError.unsupportedMethod());\n        }\n        if (!this.connection.connected) {\n            await this.open();\n        }\n\n        const rpcRequest = {\n            id: request.id ?? uuidv4(),\n            jsonrpc: request.jsonrpc ?? '2.0',\n            method: request.method,\n            params: request.params,\n        };\n\n        if (signerMethods.includes(rpcRequest.method) || this.isParticleSignerMethod(rpcRequest.method)) {\n            console.log('Particle Signer Provider Request', rpcRequest);\n            return await this.signerProvider.request(rpcRequest);\n        } else {\n            try {\n                this.chainId = Number(await this.signerProvider.request({ method: 'eth_chainId' }));\n            } catch (error) {\n                this.chainId = Number(this.auth.getChainId());\n            }\n            const particlePpcRequest = { ...rpcRequest, chainId: this.chainId };\n            console.log('Particle Provider Delegate Request', particlePpcRequest);\n            return await this.requestStrict(particlePpcRequest);\n        }\n    }\n\n    private isParticleSignerMethod(method: string): boolean {\n        return (this.signerProvider as any).isParticleNetwork && particleSignerMethods.includes(method);\n    }\n\n    private async requestStrict(request: ParticleRpcRequest): Promise<any> {\n        return this.connection.send(request).then((output) => {\n            if (output.error) {\n                return Promise.reject(output.error);\n            } else {\n                return Promise.resolve(output.result);\n            }\n        });\n    }\n\n    private async open() {\n        await this.connection.open();\n    }\n}\n"],"names":["ProviderError","_Error","_inherits","_super","_createSuper","code","message","data","_this","_classCallCheck","call","_createClass","key","value","_wrapNativeSuper","Error","IEvents","IJsonRpcConnection","_IEvents","_super2","_this2","apply","arguments","events","EventEmitter","event","listener","this","on","once","off","removeListener","IJsonRpcProvider","_IEvents2","_super3","_this3","notSupportMethods","signerMethods","particleSignerMethods","AuthEVMAdapter","auth","request","__async","_regeneratorRuntime","mark","_callee","wallet","txData","typedData","_typedData","chainId","chain","wrap","_context","prev","next","method","getWallet","abrupt","public_address","login","intToHex","getChainId","params","Array","isNullish","type","chains","isChainSupportEIP1559","getChain","nonce","sendTransaction","legacyToString","Promise","reject","paramsError","length","startsWith","addHexPrefix","Buffer2","from","toString","sign","Number","getEVMChainInfoById","switchChain","resolve","unsupportedChain","unsupportedMethod","stop","JSON","stringify","HttpConnection","_IJsonRpcConnection","_super4","config","_this4","registering","isHttpUrl","url","concat","get","api","_callee2","_context2","register","sent","_callee3","_context3","onClose","_callee4","_context4","post","then","res","_callee5","connectConfig","_this5","_context5","axios","create","baseURL","timeout","headers","Accept","interceptors","use","_a","_b","projectUuid","authentication","projectId","projectKey","clientKey","error","onOpen","emit","ParticleProvider","_IJsonRpcProvider","_super5","_this6","isParticleNetwork","connection","setConnection","authAdapter","name","intToHex2","id","window","particle","particleProvider","_assertThisInitialized","packages","init_package","__toCommonJS","package_exports","version","getVersion","_this7","rpcUrl","basicCredentials","eventName","_this$events","_len","args","_key","_callee6","_context6","logout","_callee7","_context7","_callee8","rpcRequest","_context8","includes","connected","open","uuidv4","jsonrpc","requestStrict","_callee9","_context9","send","output","result","_callee10","_this8","_context10","_callee11","_context11","close","ParticleDelegateProvider","_IJsonRpcProvider2","_super6","signerProvider","_this9","isParticleDelegateProvider","listenEvent","_this10","rpcUrl2","_callee12","provider","_context12","disconnect","t0","_callee13","_context13","enable","_callee14","particlePpcRequest","_context14","uuidv42","isParticleSignerMethod","t1","t2","__spreadValues","_callee15","_context15","_callee16","_context16"],"sourceRoot":""}